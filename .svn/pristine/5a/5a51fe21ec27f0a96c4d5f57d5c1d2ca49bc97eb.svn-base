package com.web.ddentist.ddit.community.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.web.ddentist.ddit.community.service.ICommunityService;
import com.web.ddentist.hospital.manage.empInfo.util.ArticlePage;
import com.web.ddentist.patient.service.PatientDetails;
import com.web.ddentist.vo.CommunityReplyVO;
import com.web.ddentist.vo.CommunityVO;
import com.web.ddentist.vo.EmployeeVO;
import com.web.ddentist.vo.PageVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/ddit/community")
public class CommunityController {
	
	@Autowired
	ICommunityService communityService;
	
	// 요청URI
	// 1)요청 파라미터 o: /ddit/community/list?currentPage = 2
	// 2)요청 파라미터 x: /ddit/community/list
	// 파라미터는 선택사항이기때문에 => required=false
	// defaultValue : 파라미터가 없으면 1페이지로 간주 => defaultValue ="1"
	// currentPage=2 파라미터 타입은 String.. but, int 타입의 매개변수로 자동 형변환 가능
	// 게시글 목록
	@GetMapping("")
	public String home(Model model,
					@RequestParam(value="currentPage", required= false, defaultValue="1") int currentPage,
					@RequestParam(value="size", required= false, defaultValue="10") int size,
					@RequestParam(value="keyword", required= false) String keyword) {
		
		// 검색 조건
		Map<String, String> map = new HashMap<String, String>();
		
		
		// 1)전체 행의 수 구하기(total)
		int total = this.communityService.getTotal(keyword);
		System.out.println("total : " + total);
		
		map.put("currentPage", currentPage + "");
		map.put("size", size + "");
		map.put("keyword", keyword);
		System.out.println("map : " + map);
		
		// 페이징 처리 전 ..
		List<CommunityVO> communityList = this.communityService.selectList(map);
		log.info("communityList : {} " + communityList);
		
		// 페이징 처리 후..
		PageVO<CommunityVO> articleList = new PageVO<CommunityVO>(total, currentPage, size, communityList, 5);
		List<CommunityVO> list = articleList.getContent();
		log.info("articleList : "+ list);
//		log.info("list.size()" + list.size());
		
		
		model.addAttribute("data", articleList);
		model.addAttribute("list", list);
//		model.addAttribute("list", null);
		
		return "ddit/community";
	}
	
	// 상세조회
	@GetMapping("/detail")
	public String detail(@ModelAttribute CommunityVO commVO, Model model) {
		log.info("commVO : {comNum 넘어왔니????????}" + commVO);
		
		// 조회수 증가시키기
		this.communityService.viewCount(commVO);
		
		// 상세정보 가져오기
		commVO = this.communityService.detail(commVO);
		int comNum = commVO.getComNum();
		List<CommunityReplyVO> getReplyList = this.communityService.getReplyList(comNum);
		
		model.addAttribute("commVO", commVO);
		model.addAttribute("getReplyList", getReplyList);
		log.info("getReplyList : " + getReplyList);
		return "ddit/communityDetail";
	}
	

	// 수정페이지 이동
	@PreAuthorize("hasRole('ROLE_PT')")
	@GetMapping("/update")
	public String update(@ModelAttribute CommunityVO communityVO, @RequestParam String mode, Model model) {
		log.info("communityVO : {comNum 넘어왔니????????}" + communityVO); //CommunityVO(comNum=111, ptNum=null, comTitle=null, comContent=null, comDt=null, comInqCnt=0, ptNm=null, ptId=null)
		log.info("mode: " + mode); // mode: update
		
		// 회원인 환자인지 확인
		PatientDetails ptInfo = (PatientDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String ptNum = ptInfo.getPtVO().getPtNum();
		
		// 상세정보 가져오기
		communityVO = this.communityService.detail(communityVO);
		log.info("communityVO {상세정보} : " + communityVO);
		
		model.addAttribute("communityVO", communityVO);
		model.addAttribute("ptNum", ptNum);
		model.addAttribute("mode", mode);
		
		return "ddit/communityRegister";
	}
	
	// 수정하기
	@PostMapping("/updatePost")
	public String updatePost(@ModelAttribute CommunityVO commVO) {
		log.info("updatePost에 왔다!!!");
		
		log.info("commVO : {comNum 넘어왔니????????}" + commVO);
		
		int result = this.communityService.updatePost(commVO);
		System.out.println("수정 결과 : " + result);
		
		return "redirect:/ddit/community/detail?comNum="+commVO.getComNum();
	}
	
	// 글 등록 페이지로 이동
	@PreAuthorize("hasRole('ROLE_PT')")
	@GetMapping("/register")
	public String insert(Model model, @RequestParam String mode) {
		// 환자정보
		PatientDetails ptInfo = (PatientDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String ptNum = ptInfo.getPtVO().getPtNum();
		log.info("::::::::::::::ptNum:"+ptNum);
		log.info("::::::::::::::mode : " + mode);
		
		model.addAttribute("ptNum", ptNum);
		model.addAttribute("mode", mode);
		
		return "ddit/communityRegister";
	}
	
	// 글 등록하기
	@PreAuthorize("hasRole('ROLE_PT')")
	@PostMapping("/insertPost")
	public String insertPost(@ModelAttribute CommunityVO commVO) {
		log.info("commVO : " + commVO);
		log.info("commVO.getPtNum() : " +commVO.getPtNum());

		int result = this.communityService.insertPost(commVO);
		System.out.println("등록 결과 : " +result);
		
		return "redirect:/ddit/community"; 
	}
	
	// 글 삭제하기
	@GetMapping("/deletePost")
	public String deletePost(@RequestParam int comNum) {
		
		this.communityService.deletePost(comNum);
		
		return "redirect:/ddit/community"; 
	}
	
	// 최상위 댓글 등록
	@ResponseBody
	@PostMapping("/insertReply")
	public List<CommunityReplyVO> insertReply(@RequestBody CommunityReplyVO replyVO, @RequestParam int comNum) {
		
		log.info("insertReply에 왔다.");
		log.info("replyVO :::::: "+ replyVO);
		
		int result = this.communityService.insertReply(replyVO);
		List<CommunityReplyVO> getReplyList = this.communityService.getReplyList(comNum);
		log.info("getReplyList ::::: " + getReplyList);
		return getReplyList;
	}
	
	// 대댓글 등록
	@ResponseBody
	@PostMapping("/reReply")
	public List<CommunityReplyVO> reReply(@RequestBody CommunityReplyVO replyVO, @RequestParam int comNum){
		//댓글정보를 가져온다
		//해당댓글의 레벨+1을한다.
		
		log.info("reReply에 왔다.");
		log.info("replyVO :::::: "+ replyVO);
		
		int result = this.communityService.insertReReply(replyVO);
		log.info("등록 결과 : " +result);
		
		List<CommunityReplyVO> getReplyList = this.communityService.getReplyList(comNum);
		log.info("댓글리스트 결과 : " +getReplyList);
		return getReplyList;
	}
	
}
