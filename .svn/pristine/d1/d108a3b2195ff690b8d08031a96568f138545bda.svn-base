package com.web.ddentist.hospital.crm.sms.service;

import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.google.common.reflect.TypeToken;
import com.google.gson.Gson;
import com.web.ddentist.hospital.crm.sms.util.SmsDetails;
import com.web.ddentist.hospital.crm.sms.util.SmsSendUtil;
import com.web.ddentist.mapper.SmsMapper;
import com.web.ddentist.vo.CrmVO;
import com.web.ddentist.vo.PatientVO;
import com.web.ddentist.vo.SmsTemplateVO;
import com.web.ddentist.vo.SmsVO;

@Service
public class SmsServiceImpl implements ISmsService {

	@Autowired
	private SmsSendUtil smsSendUtil;
	@Autowired
	private SmsMapper smsMapper;

	@Override
	public List<CrmVO> searchPtOnCrmList(Map<String, String> searchMap) {
		return smsMapper.searchPtOnCrmList(searchMap);
	}

	@Override
	public List<PatientVO> searchPtOnTargetList(String keyword) {
		return smsMapper.searchPtOnTargetList(keyword);
	}

	@Transactional
	@Override
	public int sendSmsOnCrm(String smsData) {

		Gson gson = new Gson();
		Type type = new TypeToken<SmsDetails>(){
			private static final long serialVersionUID = 3852028018353797081L;}.getType();

		SmsDetails sms = gson.fromJson(smsData, type);
		List<CrmVO> crmList = smsMapper.listCrm(sms.getCrmNumList());

		int sendCount = 0;
		for(CrmVO crmVO : crmList) {
			try {

				String smsContent = smsSendUtil.parseSmsContent(sms.getSmsContent(), crmVO.getPtNm(), crmVO.getCrmNxResvDtStr());
				boolean successYN = smsSendUtil.sendSms(crmVO.getPtPhone(), smsContent);
				if(!successYN) return sendCount;

				SmsVO smsVO = new SmsVO();
				smsVO.setPtNum(crmVO.getPtNum());
				smsVO.setPtNm(crmVO.getPtNm());
				smsVO.setPtPhone(crmVO.getPtPhone());
				smsVO.setSmsContent(smsContent);

				int result = smsMapper.insertSms(smsVO);
				if(result == 0) return sendCount;

				result = smsMapper.updateCrmStatus(crmVO.getCrmNum());
				if(result == 0) return sendCount;

				sendCount++;

			} catch (Exception e) {
				return sendCount;
			}
		}

		return sendCount;
	}

	@Override
	public int sendSmsOnTarget(String smsData) {

		Gson gson = new Gson();
		Type type = new TypeToken<SmsDetails>(){
			private static final long serialVersionUID = 4159141129019193458L;}.getType();

		SmsDetails sms = gson.fromJson(smsData, type);
		List<PatientVO> ptList = smsMapper.listPtPhone(sms.getPtNumList());

		int sendCount = 0;
		for(PatientVO ptVO : ptList) {
			try {

				String smsContent = smsSendUtil.parseSmsContent(sms.getSmsContent(), ptVO.getPtNm(), ptVO.getCrmNxResvDtStr());
				boolean successYN = smsSendUtil.sendSms(ptVO.getPtPhone(), smsContent);
				if(!successYN) return sendCount;

				SmsVO smsVO = new SmsVO();
				smsVO.setPtNum(ptVO.getPtNum());
				smsVO.setPtNm(ptVO.getPtNm());
				smsVO.setPtPhone(ptVO.getPtPhone());
				smsVO.setSmsContent(smsContent);

				int result = smsMapper.insertSms(smsVO);
				if(result == 0) return sendCount;

				sendCount++;

			} catch (Exception e) {
				return sendCount;
			}
		}

		return sendCount;
	}

	@Override
	public int uncompleteCrm(List<String> crmNumList) {
		return smsMapper.uncompleteCrm(crmNumList);
	}

	@Override
	public int completeCrm(List<String> crmNumList) {
		return smsMapper.completeCrm(crmNumList);
	}

	@Override
	public int deleteCrm(List<String> crmNumList) {
		return smsMapper.deleteCrm(crmNumList);
	}

	@Override
	public List<SmsVO> searchSmsHist(Map<String, String> searchMap) {
		return smsMapper.searchSmsHist(searchMap);
	}

	@Override
	public List<SmsTemplateVO> listSmsTemplate(SmsTemplateVO smsTplVO) {
		return smsMapper.listSmsTemplate(smsTplVO);
	}

	@Override
	public String insertSmsTemplate(SmsTemplateVO smsTplVO) {
		String tplRepYn = smsTplVO.getTplRepYn();
		if(tplRepYn == null || tplRepYn.equals("")) {
			smsTplVO.setTplRepYn("N");
		}
		int result = smsMapper.insertSmsTemplate(smsTplVO);
		if(result == 0) return "FAILED";
		return "INSERT";
	}

	@Override
	public String updateSmsTemplate(SmsTemplateVO smsTplVO) {
		int result = 0;
		if(smsTplVO.getTplRepYn() != null && smsTplVO.getTplRepYn().equals("Y")) {
			result = smsMapper.resetSmsTemplateRep(smsTplVO);
			if(result == 0) return "FAILED";
		}

		result = smsMapper.updateSmsTemplate(smsTplVO);
		if(result == 0) return "FAILED";
		return "UPDATE";
	}

	@Override
	public String deleteSmsTemplate(SmsTemplateVO smsTplVO) {
		int result = smsMapper.isTplRep(smsTplVO);
		if(result > 0) return "REP";
		result = smsMapper.deleteSmsTemplate(smsTplVO);
		if(result == 0) return "FAILED";
		return "SUCCESS";
	}



}
