package com.web.ddentist.hospital.desk.service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.web.ddentist.mapper.DeskMapper;
import com.web.ddentist.vo.ChairVO;
import com.web.ddentist.vo.CommonCodeVO;
import com.web.ddentist.vo.EmployeeVO;
import com.web.ddentist.vo.FamilyVO;
import com.web.ddentist.vo.PatientVO;
import com.web.ddentist.vo.QuestionnaireVO;
import com.web.ddentist.vo.RegistVO;
import com.web.ddentist.vo.UnderlyingConditionVO;

@Service
public class DeskServiceImpl implements IDeskService {
	
	@Autowired
	private DeskMapper deskMapper;
	
	@Override
	public List<CommonCodeVO> listCommonCode(String commGrCd) {
		return deskMapper.listCommonCode(commGrCd);
	}
	
	@Override
	public List<EmployeeVO> listEmployee() {
		return deskMapper.listEmployee();
	}
	
	@Override
	public List<ChairVO> listChair() {
		return deskMapper.listChair();
	}
	
	@Override
	public String insertPatient(PatientVO patientVO) {
		int result = deskMapper.insertPatient(patientVO);
		if(result == 0) return "FAILED";
		return patientVO.getPtNum();
	}
	
	@Override
	public String updatePatient(PatientVO patientVO) {
		int result = deskMapper.updatePatient(patientVO);
		if(result == 0) return "FAILED";
		return "UPDATE";
	}
	
	@Override
	public List<PatientVO> searchPatient(String keyword) {
		return deskMapper.searchPatient(keyword);
	}
	
	@Override
	public PatientVO selectPatient(String ptNum) {
		return deskMapper.selectPatient(ptNum);
	}
	
	@Override
	public String deletePatient(String ptNum) {
		
		int result = deskMapper.countCheckupRecord(ptNum);
		if(result > 0) return "DENIED";
		
		result = deskMapper.deletePatient(ptNum);
		return result == 1 ? "SUCCESS" : "FAILED";
	}
	
	@Override
	public String insertQue(QuestionnaireVO queVO) {
		
		int result = deskMapper.insertQue(queVO);
		if(result == 0) return "FAILED";
		
		List<UnderlyingConditionVO> uConList = new ArrayList<>();
		for(UnderlyingConditionVO uCon : queVO.getuConList()) {
			if(uCon.getConNm() != null) {
				uCon.setPtNum(queVO.getPtNum());
				uConList.add(uCon);
			}
		}
		result = deskMapper.insertUCon(uConList);
		if(result == 0) return "FAILED";
		return "INSERT";
	}
	
	@Override
	public QuestionnaireVO selectQue(String ptNum) {
		return deskMapper.selectQue(ptNum);
	}
	
	@Override
	public String updateQue(QuestionnaireVO queVO) {
		
		int result = deskMapper.insertQue(queVO);
		if(result == 0) return "FAILED";
		
		if(queVO.getuConList() == null) {
			int count = deskMapper.checkUConCount(queVO.getPtNum());
			if(count > 0) {
				result = deskMapper.resetUCon(queVO.getPtNum());
				if(result == 0) return "FAILED";
			}
			return "UPDATE";
		}
		
		List<UnderlyingConditionVO> uConList = new ArrayList<>();
		for(UnderlyingConditionVO uCon : queVO.getuConList()) {
			if(uCon.getConNm() != null) {
				uCon.setPtNum(queVO.getPtNum());
				uConList.add(uCon);
			}
		}
		
		deskMapper.resetUCon(queVO.getPtNum());
		result = deskMapper.insertUCon(uConList);
		if(result == 0) return "FAILED";
		return "UPDATE";
	}
	
	@Override
	public List<RegistVO> listRegist() {
		return deskMapper.listRegist();
	}
	
	@Override
	public String insertRegist(RegistVO regVO) {
		int result = deskMapper.insertRegist(regVO);
		if(result == 0) return "FAILED";
		return "SUCCESS";
	}
	
	@Override
	public String cancelRegist(RegistVO regVO) {
		int result = deskMapper.cancelRegist(regVO);
		if(result == 0) return "FAILED";
		return "SUCCESS";
	}
	
	@Override
	public Map<String, Object> selectDetail(String ptNum) {
		Map<String, Object> detailMap = new HashMap<>();
		detailMap.put("familyList", deskMapper.listFamily(ptNum));
		detailMap.put("checkupList", deskMapper.listCheckup(ptNum));
		detailMap.put("rcvmtList", deskMapper.listRcvmt(ptNum));
		return detailMap;
	}
	
	@Override
	public String insertFamily(FamilyVO famVO) {
		int result = deskMapper.insertFamily(famVO);
		if(result == 0) return "FAILED";
		return "INSERT";
	}
	
	@Override
	public List<FamilyVO> listFamily(String ptNum) {
		return deskMapper.listFamily(ptNum);
	}
	
	@Override
	public FamilyVO selectFamily(FamilyVO famVO) {
		return deskMapper.selectFamily(famVO);
	}
	
	@Override
	public String updateFamily(FamilyVO famVO) {
		int result = deskMapper.updateFamily(famVO);
		if(result == 0) return "FAILED";
		return "UPDATE";
	}
	
	@Override
	public String deleteFamily(FamilyVO famVO) {
		int result = deskMapper.deleteFamily(famVO);
		if(result == 0) return "FAILED";
		return "SUCCESS";
	}
}
