package com.web.ddentist.hospital.manage.empInfo.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.web.ddentist.hospital.manage.empInfo.service.IEmpInfoService;
import com.web.ddentist.hospital.manage.empInfo.util.ArticlePage;
import com.web.ddentist.vo.CommonCodeVO;
import com.web.ddentist.vo.DepartmentVO;
import com.web.ddentist.vo.EmployeeVO;
import com.web.ddentist.vo.JbgdVO;

import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnailator;
import oracle.jdbc.proxy.annotation.Post;

/**
 * 병원관리 메뉴 - 직원관리 페이지
 * 
 * @author 박지은
 */
@Slf4j
@Controller
@RequestMapping("/hospital/manage/empInfo")
public class EmpInfoController {

	@Autowired
	IEmpInfoService empInfoService;

	// 직원 정보 페이지이동
	@GetMapping("")
	public String detail(Model model) {
		log.info("직원정보 페이지에 왔다.");
		
		/**
		 * 공통코드 쓸 경우
		 */
		
		String commGrCd = "HDOF_YN_CD";
		List<CommonCodeVO> hdpfYnList  = this.empInfoService.getCommon(commGrCd);
		log.info("hdpfYnList : {}" + hdpfYnList);
		
		List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
		List<DepartmentVO> deptList = this.empInfoService.getDept();
		
		model.addAttribute("hdpfYnList", hdpfYnList);
		model.addAttribute("jbgdList", jbgdList);
		model.addAttribute("deptList", deptList);
		
		return "hospital/empInfo";
	}

	// 직원 리스트 조회
	// 페이징처리
	// defaultValue : 파라미터가 없으면 1페이지로 간주
	// currentPage=2 파라미터 타입은 String
	// 페이지별 목록개수는 개본 10으로 세팅
	@ResponseBody
	@GetMapping("/empList")
	public ArticlePage<EmployeeVO> empList(
			@RequestParam(value="currentPage", required = false, defaultValue = "1") int currentPage,
			@RequestParam(value="size", required= false, defaultValue = "5") int size,
			@RequestParam(required= false) Map<String, String> param) {
		
		log.info("empList에 왔다!!!");
		log.info("currentPage : " + currentPage);
		
		// 페이징 처리 시작
		// 1) 전체 행의 수(getTotal(검색키워드(이름 또는 사번))
		int total = this.empInfoService.getTotal(param);
		log.info("total : " + total);
		// int size = 3; 
		
		// 검색 조건
		param.put("currentPage", String.valueOf(currentPage));
		param.put("size", String.valueOf(size));
		
		
		List<EmployeeVO> empList = this.empInfoService.getList(param);
		log.info("직원 empList : " + empList);
		
		// 페이징 처리 후..
		ArticlePage<EmployeeVO> articleList = new ArticlePage<EmployeeVO>(total, currentPage, size, empList);
		log.info("articleList : "+ articleList);
	
		String msg = "";
		
		return articleList;
	
	}
	
	// 직원 정보 조회
	@ResponseBody
	@GetMapping("/getEmpInfo")
	public EmployeeVO getEmpInfo(@ModelAttribute EmployeeVO empVO) {

		log.info("getEmpInfo에 왔다!!!");
		log.info("empVO : {}", empVO);
		EmployeeVO vo = this.empInfoService.getEmpInfo(empVO);
		log.info("직원 조회 결과 : {}", vo);

		return vo;
	}

	// 직원 등록
	// 골뱅이Valid는 CusVO의 validation 체크를 해주는 애너테이션
	@ResponseBody
	@PostMapping("/createEmp")
	public int createPost(@Validated @ModelAttribute EmployeeVO employeeVO,
			MultipartFile uploadFile, Model model) {

		log.info("employeeVO : " + employeeVO);
		
		//재직여부가 기본적으로 0으로 들어오는데 새로운 직원을 등록할때는 1로 바꿔준다.
		if(employeeVO.getHdofYn() == 0) {
			employeeVO.setHdofYn(1);
		}
		
		String uploadFilename = "";
		
		if(uploadFile != null && !uploadFile.isEmpty()) {
		//파일업로드 서비스 호출
		uploadFilename = fileUpload(uploadFile);
		
		
		//  /2023/02/21/fdsfe_즤니.jpg
		String filename = "/" + getFolder().replace("\\", "/") + "/" + "s_" + uploadFilename;
		System.out.println("filename : " + filename);
		
		employeeVO.setEmpImg(filename);
		}
		
		int result = this.empInfoService.createEmp(employeeVO);
		System.out.println("직원등록 결과 : " + result);
		
		return result;
	}

	// 직원정보수정
	@ResponseBody
	@PostMapping("/updateEmp")
	public int updateEmp(@ModelAttribute EmployeeVO employeeVO, 
						 @RequestParam(value= "uploadFile", required= false) MultipartFile uploadFile) {
		log.info("updateEmp에 왔다!!");
		log.info("employeeVO : " + employeeVO);
		
		String empRtrmYmd = employeeVO.getEmpRtrmYmd();
		log.info("empRtrmYmd : {퇴사일자} " + empRtrmYmd);
		
		if(empRtrmYmd == null || empRtrmYmd == "") {
			employeeVO.setHdofYn(1);
		}else if(empRtrmYmd != null || empRtrmYmd != "") {  //퇴사자일 경우에 해당
			employeeVO.setHdofYn(0);
		}
		
		String uploadFilename = "";
		
		if(uploadFile != null && !uploadFile.isEmpty()) {
		//파일업로드 서비스 호출
		uploadFilename = fileUpload(uploadFile);
		
		
		//  /2023/02/21/fdsfe_즤니.jpg
		String filename = "/" + getFolder().replace("\\", "/") + "/" + "s_" + uploadFilename;
		employeeVO.setEmpImg(filename);
		}
		
		int result = this.empInfoService.updateEmp(employeeVO);
		log.info("직원정보 수정 결과 : " + result+ "업데이트 성공!!!!");
		
		return result;
		
	}
	
	// 직원 정보 삭제
	@ResponseBody
	@GetMapping("/deleteEmp")
	public int deleteEmp(@ModelAttribute EmployeeVO employeeVO) {
		log.info("deleteEmp에 왔다!!!");
		
		int result = this.empInfoService.deleteEmp(employeeVO);
		log.info("삭제 결과 : " + result);
		return result;
	}
	
	// 직원 사진 삭제
	@ResponseBody
	@PostMapping("/deleteFile")
	public int deleteFile(@RequestBody EmployeeVO employeeVO) {
		log.info("deleteFile에 왔다 !!!");
		
		int result = this.empInfoService.deleteFile(employeeVO);
		
		return result;
	}
	
	// 부서관리 클릭 시 모달창에 부서관리 List띄우기
	@ResponseBody
	@GetMapping("/getDeptList")
	public List<DepartmentVO> getDeptList(){
		
		List<DepartmentVO> deptList = this.empInfoService.getDept();
		
		return deptList;
	}
	
	// 부서 추가
	@ResponseBody
	@PostMapping("/createDept")
	public List<DepartmentVO> createDept(@ModelAttribute DepartmentVO departmentVO) {
		log.info("createDept에 왔다 !!!");
		
		log.info("departmentVO : " + departmentVO);
		//부서명을 넘긴다. 
		int result = this.empInfoService.createDept(departmentVO);
		//성공하면
		if(result > 0) {
			List<DepartmentVO> deptList = this.empInfoService.getDept();
			return deptList;
		}else {
			List<DepartmentVO> deptList = this.empInfoService.getDept();
			return deptList;
		}
	}
	
	// 부서 삭제
	@ResponseBody
	@PostMapping("/deleteDept")
	public List<DepartmentVO> deleteDept(@ModelAttribute DepartmentVO departmentVO) {
		log.info("deleteDept에 왔다 !!!");
		int result = this.empInfoService.deleteDept(departmentVO);
		
		if(result > 0) {
			List<DepartmentVO> deptList = this.empInfoService.getDept();
			return deptList;
		}else {
			List<DepartmentVO> deptList = this.empInfoService.getDept();
			return deptList;
		}
	}
	
	// 부서 수정
	@ResponseBody
	@PostMapping("/updateDept")
	public List<DepartmentVO> updateDept(@ModelAttribute DepartmentVO departmentVO) {
		log.info("updateDept에 왔다 !!!");
		int result = this.empInfoService.updateDept(departmentVO);
		
		if(result > 0) {
			List<DepartmentVO> deptList = this.empInfoService.getDept();
			return deptList;
		}else {
			List<DepartmentVO> deptList = this.empInfoService.getDept();
			return deptList;
		}
	}
	
	// 직급관리 클릭 시 모달창에 부서관리 List띄우기
	@ResponseBody
	@GetMapping("/getJbgdList")
	public List<JbgdVO> getJbgdList(){
		
		List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
		System.out.println("jbgdList : " + jbgdList);
		
		return jbgdList;
		
	}
	
	// 직급 추가
	@ResponseBody
	@PostMapping("/createJbgd")
	public List<JbgdVO> createJbgd(@ModelAttribute JbgdVO jbgdVO) {
		log.info("createJbgd에 왔다 !!!");

		log.info("jbgdVO : " + jbgdVO);
		
		// 직급명을 넘긴다.
		int result = this.empInfoService.createJbgd(jbgdVO);
		
		// 성공하면
		if (result > 0) {
			List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
			return jbgdList;
		} else {
			List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
			return jbgdList;
		}
	}

	// 직급 수정
	@ResponseBody
	@PostMapping("/updateJbgd")
	public List<JbgdVO> updateJbgd(@ModelAttribute JbgdVO jbgdVO){
		
		int result = this.empInfoService.updateJbgd(jbgdVO);
		
		// 성공하면
		if (result > 0) {
			List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
			return jbgdList;
		} else {
			List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
			return jbgdList;
		}
	}
	
	// 직급 삭제
	@ResponseBody
	@PostMapping("/deleteJbgd")
	public List<JbgdVO> deleteJbgd(@ModelAttribute JbgdVO jbgdVO){
		
		int result = this.empInfoService.deleteJbgd(jbgdVO);
		
		// 성공하면
		if (result > 0) {
			List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
			return jbgdList;
		} else {
			List<JbgdVO> jbgdList = this.empInfoService.getJbgd();
			return jbgdList;
		}
	}
	
	// 비밀번호 변경
	@ResponseBody
	@PostMapping("/changePassword")
	public String changePassword(@RequestBody Map<String, String> data) {
		log.info("data : " + data);
		
		EmployeeVO vo = new EmployeeVO();
		vo.setEmpPw(data.get("changedPw"));
		log.info("vo : " + vo);
		vo.setEmpNum(data.get("empNum"));
		log.info("vo : " + vo);
		
		// 비밀번호 변경요청
		int result = this.empInfoService.changePassword(vo);
		
		// 성공하면
		if (result > 0) {
			return "SUCCESS";
		} else {
			return "FAILED";
		}
	}
	
	public String fileUpload(MultipartFile uploadFile) {
		

		String uploadFolder ="C:\\eGovFrameDev-3.10.0-64bit\\workspace\\DDentistProj\\src\\main\\webapp\\resources\\images\\employee";
							
		File uploadPath = new File(uploadFolder, getFolder());
	    log.info("upload Path : " +  uploadPath);
	    
	    if(uploadPath.exists()==false) { 
	        uploadPath.mkdirs(); 
	    } 
	    String uploadFileName= uploadFile.getOriginalFilename();
	    System.out.println("오리지날 파일이름 : " + uploadFileName);
	    
	    UUID uuid = UUID.randomUUID();
	    uploadFileName = uuid.toString() +  "_" + uploadFileName;
	    
	    File saveFile = new File(uploadPath, uploadFileName);
	    
	    try {
	        //계획을 실행 => 파일 복사됨(클라이언트의 파일을 서버의공간으로 복사)
	        uploadFile.transferTo(saveFile);
	        
	        //썸네일 처리하자
			if(checkImageType(saveFile)) {
				
			//썸네일 생성
			FileOutputStream thumbnail = new FileOutputStream(new File(uploadPath, "s_" + uploadFileName));
			Thumbnailator.createThumbnail(uploadFile.getInputStream(), thumbnail, 140, 200);
			thumbnail.close(); //outputStream을 close
			}
	        	
	    } catch (IllegalStateException e) {
	        log.error(e.getMessage());
	    } catch (IOException e) {
	        log.error(e.getMessage());
	    }
        
	    return uploadFileName;
	}
	
	//이미지냐?
	public static boolean checkImageType(File uploadFile) {
		
		//마임타입인지 확인
		//file.toPath() : 파일객체를 path객체로 변환함
		try {
			String contentType = Files.probeContentType(uploadFile.toPath());
			log.info("contentType : " + contentType);
			
			//contentType가 image로 시작하면 true를리턴
			return contentType.startsWith("image");
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// 이 파일이 이미지가 아닐 경우
		return false;
	}

	public static String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date);
		
		return str.replace("-", File.separator);
	}
}
