package com.web.ddentist.hospital.chart.service;

import java.util.List;
import java.util.Map;

import com.web.ddentist.vo.CheckupVO;
import com.web.ddentist.vo.PiVO;
import com.web.ddentist.vo.RegistVO;
import com.web.ddentist.vo.ReservationVO;
import com.web.ddentist.vo.TxNextVO;
import com.web.ddentist.vo.TxPlanVO;
import com.web.ddentist.vo.TxVO;

public interface IChartService {
	
	/**
	 * 전자차트 페이지의 기본 데이터를 가져옴
	 * 
	 * @return List&lt;DiseaseVO&gt;, List&lt;TxCodeVO&gt; 을 포함한 Map 객체<br>
	 * List&lt;DiseaseVO&gt;의 key : disList<br>
	 * List&lt;TxCodeVO&gt;의 key : txcList
	 */
	public Map<String, Object> initChartData();
	
	/**
	 * 오늘의 접수 목록을 조회
	 * 
	 * @return 오늘 등록된 접수 목록
	 */
	public List<RegistVO> listRegist();
	
	/**
	 * 취소된 예약을 제외한 오늘의 예약 목록을 조회
	 * 
	 * @return 오늘의 예약 목록
	 */
	public List<ReservationVO> listResv();
	
	/**
	 * 접수 목록으로부터 진료를 시작하여 진료 데이터 추가<br>
	 * 이후 해당 접수의 상태를 '접수중'으로 변경
	 * 
	 * @param chkVO 접수 번호와 진료 담당 직원 번호가 담긴 VO 
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String insertCheckup(CheckupVO chkVO);
	
	/**
	 * 접수 테이블의 상태(REG_STATUS)를 진료중단(STOP)으로 변경
	 * 
	 * @param chkVO 상태를 변경할 진료의 진료 번호가 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String stopCheckup(CheckupVO chkVO);
	
	/**
	 * 접수 태이블의 상태(REG_STATUS)를 진료완료(CMPTN_TREAT)로 변경
	 * 
	 * @param chkVO 상태를 변경할 진료의 진료 번호가 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String completeCheckup(CheckupVO chkVO);
	
	/**
	 * 환자의 증상(PI)을 추가
	 * 
	 * @param piVO 증상(PI) 정보
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String insertPi(PiVO piVO);
	
	/**
	 * 환자의 치료 계획(TX PLAN)을 추가
	 * 
	 * @param txpVO 치료 계획(TX PLAN) 정보가 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String insertTxPlan(TxPlanVO txpVO);
	
	/**
	 * 환자의 처치(TX)을 추가
	 * 
	 * @param txVO 처치(TX) 정보가 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String insertTx(TxVO txVO);
	
	/**
	 * 환자의 다음 치료 계획(TX NEXT)을 추가
	 * 
	 * @param txnVO 다음 치료 계획(TX NEXT) 정보가 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String insertTxNext(TxNextVO txnVO);
	
	/**
	 * 진료 차트 목록 조회
	 * 
	 * @param ptNum 환자 번호
	 * @return List&lt;PiVO&gt;, List&lt;TxPlanVO&gt; List&lt;TxVO&gt;, List&lt;TxNextVO&gt; 을 포함한 Map 객체<br>
	 * List&lt;PiVO&gt;의 key : piList<br>
	 * List&lt;TxPlanVO&gt;의 key : txpList<br>
	 * List&lt;TxVO&gt;의 key : txList<br>
	 * List&lt;TxNextVO&gt;의 key : txnList
	 */
//	public Map<String, Object> listChart(String ptNum);
	
	
	/**
	 * 환자의 진료 차트 기록 목록 조회
	 * 
	 * @param ptNum 환자 번호
	 * @return 증상, 처치 계획, 처치, 다음 처치 계획을 포함한 CheckupVO의 목록
	 */
	public List<CheckupVO> listChart(String ptNum);
	
	
	/**
	 * 환자의 증상 삭제
	 * 
	 * @param piVO 삭제할 증상의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String deletePi(PiVO piVO);
	
	/**
	 * 환자의 치료 계획 삭제
	 * 
	 * @param txpVO 삭제할 치료 계획의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String deleteTxPlan(TxPlanVO txpVO);
	
	/**
	 * 환자의 처치 삭제
	 * 
	 * @param txVO 삭제할 처치의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String deleteTx(TxVO txVO);
	
	/**
	 * 환자의 다음 치료 계획 삭제
	 * 
	 * @param txnVO 삭제할 다음 치료 계획의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : "SUCCESS", 실패 : "FAILED"
	 */
	public String deleteTxNext(TxNextVO txnVO);
	
	/**
	 * 수납 요금을 구하기 위해 수행된 TX 목록을 가져옴
	 * 
	 * @param chkNum 수납 요금을 구할 진료 건의 진료 번호
	 * @return 처치 VO 목록
	 */
	public List<TxVO> listCheckupCost(String chkNum);
}
