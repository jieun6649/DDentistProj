<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	
<mapper namespace="com.web.ddentist.mapper.PdocumentMapper">

	<select id="getDList" resultType="docVO" parameterType="String">
		SELECT P.DOC_ISSUE_NUM, P.PT_NUM, P.DOC_NUM, P.DOC_ISSUE_REASON, P.DOC_ISSUE_DT, P.CHK_NUM, P.DOC_ISSUE_NMTM,
               C.DOC_NAME, C.DOC_ISSUE_PRICE
		  FROM DOCUMENT_ISSUE P LEFT OUTER JOIN DOCUMENT C ON (P.DOC_NUM = C.DOC_NUM)
		 WHERE PT_NUM=#{ptNum}
		 ORDER BY DOC_ISSUE_NUM
	</select>

	<select id="checkBox" resultType="docVO" parameterType="docVO">
		SELECT I.DOC_ISSUE_NUM, I.PT_NUM, I.DOC_NUM, I.DOC_ISSUE_REASON, I.DOC_ISSUE_DT, I.DOC_SAVE_PATH, I.CHK_NUM,
			   (SELECT DOC_NAME
		          FROM DOCUMENT
		         WHERE DOC_NUM = I.DOC_NUM) AS DOC_NAME,
		       (SELECT DOC_ISSUE_PRICE
		          FROM DOCUMENT
		         WHERE DOC_NUM = I.DOC_NUM) AS DOC_ISSUE_PRICE
		  FROM DOCUMENT_ISSUE I
         WHERE I.PT_NUM = #{ptNum}
        		<if test="docNumList.length > 0">
        			AND I.DOC_NUM IN
        			<foreach collection="docNumList" item="item" index="index" separator="," open="(" close=")">
        				#{item}
        			</foreach>
        		</if>
                <if test="docStartDt != null and docStartDt != ''">
                <![CDATA[
                	AND I.DOC_ISSUE_DT >= TO_DATE(#{docStartDt}, 'YYYY-MM-DD')
                ]]>
                </if>
                <if test="docFinalDt != null and docStartDt != ''">
                <![CDATA[
                	AND I.DOC_ISSUE_DT <= TO_DATE(#{docFinalDt}, 'YYYY-MM-DD')+1
                ]]>
                <!-- VO에는 String타입으로 저장했고, SQL은 date타입이나 to_Date를 통해 Date타입으로 바꿔줘야한다 -->
                </if>
		 ORDER BY DOC_ISSUE_NUM
	</select>
	
	<select id="getReissuance" resultType="docVO" parameterType="docVO">
		    SELECT P.DOC_ISSUE_NUM, P.PT_NUM, P.DOC_NUM, P.DOC_ISSUE_REASON, P.DOC_ISSUE_DT, P.CHK_NUM, P.DOC_ISSUE_NMTM,
               C.DOC_NAME, C.DOC_ISSUE_PRICE
		  FROM DOCUMENT_ISSUE P LEFT OUTER JOIN DOCUMENT C ON (P.DOC_NUM = C.DOC_NUM)
		 WHERE DOC_ISSUE_NUM=#{docIssueNum}
		 ORDER BY DOC_ISSUE_NUM
	</select>
	
	<update id="docUpdate" parameterType="String"> <!-- 서류 발급 정보 수정 -->
		  UPDATE DOCUMENT_ISSUE SET DOC_ISSUE_NMTM = DOC_ISSUE_NMTM + #{docIssueNmtm} WHERE DOC_ISSUE_NUM=#{docIssueNum}
	</update>
	
	<insert id="unpaid" parameterType="hashMap"> <!-- 수납 -->
		<selectKey keyColumn="RCVMT_NUM" keyProperty="rcvmtNum" order="BEFORE" resultType="String">
			SELECT 'V' || TO_CHAR(SYSDATE, 'YYYYMMDD') || '-' ||  TRIM(TO_CHAR(NVL(SUBSTR(MAX(RCVMT_NUM), 11), 0) + 1, '0000')) FROM RCVMT
		</selectKey>
			INSERT INTO RCVMT (RCVMT_NUM,PT_NUM,RCVMT_AMT,RCVMT_STATUS,RCVMT_GRAMT,RCVMT_DT,RCVMT_TYPE) 
			VALUES (#{rcvmtNum},#{ptNum},#{mix},'CMPTN_PAY',#{mix},sysdate,'DOCUMENT')
	</insert>

	<insert id="docunpaid" parameterType="hashMap"> <!-- 서류 수납 -->
		<selectKey keyColumn="DOC_RCVMT_SN" keyProperty="docRcvmtSn" order="BEFORE" resultType="String">
			SELECT NVL(MAX(DOC_RCVMT_SN), 0) + 1 FROM DOC_RCVMT
		</selectKey>
			INSERT INTO DOC_RCVMT (DOC_RCVMT_SN,DOC_ISSUE_NUM,RCVMT_NUM,DOC_ISSUE_COUNT) 
			VALUES (#{docRcvmtSn},#{docIssueNum},#{rcvmtNum},#{docIssueNmtm})
	</insert>

	<insert id="docPay" parameterType="hashMap"> <!-- 결제 -->
		<selectKey keyColumn="RCT_NUM" keyProperty="rctNum" order="BEFORE" resultType="String">
			SELECT NVL(MAX(RCT_NUM), 0) + 1 FROM RECEIPT
		</selectKey>
			INSERT INTO RECEIPT (RCT_NUM, RCVMT_NUM, RCT_ISSUE_DT, RCVMT_RCT_SN, RCT_PAY_OPT, RCT_CARD_COMP, RCT_CARD_NUM, RCT_ACCEPT_NUM, RCT_AMT) 
			VALUES (#{rctNum},#{rcvmtNum}, sysdate, '1' ,'CARD', #{rctCardComp}, #{rctCardNum}, #{rctAcceptNum}, #{mix})
	</insert>
	
	<select id="getLockerList" parameterType="String" resultType="docVO">
		SELECT P.DOC_ISSUE_NUM, P.PT_NUM, P.DOC_NUM, P.DOC_ISSUE_REASON, P.DOC_ISSUE_DT, P.CHK_NUM, P.DOC_ISSUE_NMTM, P.DOC_SAVE_PATH,
               C.DOC_NAME, C.DOC_ISSUE_PRICE
		  FROM DOCUMENT_ISSUE P LEFT OUTER JOIN DOCUMENT C ON (P.DOC_NUM = C.DOC_NUM)
		 WHERE PT_NUM=#{ptNum}
		 ORDER BY DOC_ISSUE_NUM
	</select>
	
	<update id="getMinusUpdate" parameterType="docVO">
		UPDATE DOCUMENT_ISSUE SET DOC_ISSUE_NMTM = DOC_ISSUE_NMTM-1 WHERE DOC_ISSUE_NUM = #{docIssueNum}
	</update>
	
	<select id="getList" resultType="docVO" parameterType="docVO">
		SELECT P.DOC_ISSUE_NUM, P.PT_NUM, P.DOC_NUM, P.DOC_ISSUE_REASON, P.DOC_ISSUE_DT, P.CHK_NUM, P.DOC_ISSUE_NMTM, P.DOC_SAVE_PATH,
               C.DOC_NAME, C.DOC_ISSUE_PRICE
		  FROM DOCUMENT_ISSUE P LEFT OUTER JOIN DOCUMENT C ON (P.DOC_NUM = C.DOC_NUM)
		 WHERE PT_NUM=#{ptNum}
		 ORDER BY DOC_ISSUE_NUM
	</select>
	
</mapper>