package com.web.ddentist.chat.controller;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import com.web.ddentist.chat.service.IChatService;
import com.web.ddentist.vo.ChatMemberVO;
import com.web.ddentist.vo.EmployeeVO;

public class ChatHandler extends TextWebSocketHandler {
	
	@Autowired
	private IChatService chatService;
	
	private static Map<String, WebSocketSession> connectedSessions = new HashMap<>();
	private static Map<Integer, List<WebSocketSession>> chatGroup = new HashMap<>();
	
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		
		String empId = session.getPrincipal().getName();
		
		EmployeeVO empInfo = chatService.empInfo(empId);
		session.getAttributes().put("empInfo", empInfo);
		
		String empNum = empInfo.getEmpNum();
		connectedSessions.put(empNum, session);
		
		List<Integer> chatgroupNum = chatService.chatgrpNum(empNum);
		
		for(int num : chatgroupNum) {
			chatGroup.computeIfAbsent(num, v -> new ArrayList<>()).add(session);
		}
	}
	
	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		
//		System.out.println(message);
		int chatgrpNum = Integer.parseInt(message.getPayload().split("\\$//")[0]);
		String chatContent = message.getPayload().split("\\$//")[1];
		chatService.chat(session, chatgrpNum, chatContent);
		
		EmployeeVO empInfo = (EmployeeVO) session.getAttributes().get("empInfo");
		TextMessage msgContent = new TextMessage(chatgrpNum + "$//" + empInfo.getEmpNm() + " : " + chatContent);
		for(WebSocketSession receiver : chatGroup.get(chatgrpNum)) {
			receiver.sendMessage(msgContent);
		}
	}
	
	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		
		for(int chatgrpNum : chatGroup.keySet()) {
			chatGroup.get(chatgrpNum).remove(session);
		}
		
	}
	
	public static void newChatgrpCreated(int chatgrpNum, List<ChatMemberVO> chatMemList) {
		
		List<WebSocketSession> newChatGroup = new ArrayList<>();
		for(ChatMemberVO chatMem : chatMemList) {
			WebSocketSession session = connectedSessions.get(chatMem.getEmpNum());
			if(session == null) continue;
			newChatGroup.add(session);
		}
		chatGroup.put(chatgrpNum, newChatGroup);
	}
	
	public static void newMemInvited(int chatgrpNum, List<ChatMemberVO> invitedMemList) {
		
		List<WebSocketSession> chatMemList = chatGroup.get(chatgrpNum);
		for(ChatMemberVO chatMem : invitedMemList) {
			WebSocketSession session = connectedSessions.get(chatMem.getEmpNum());
			if(session == null) continue;
			chatMemList.add(session);
		}
	}
	
}
