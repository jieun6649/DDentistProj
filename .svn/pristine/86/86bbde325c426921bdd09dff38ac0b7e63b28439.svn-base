package com.web.ddentist.ddit.inquiry.controller;

import java.io.IOException;
import java.security.Principal;
import java.util.List;

import javax.servlet.http.HttpServletResponse;
import javax.xml.ws.Response;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.web.ddentist.ddit.inquiry.service.InquiryService;
import com.web.ddentist.ddit.inquiry.util.InqPaginationVO;
import com.web.ddentist.patient.service.PatientDetails;
import com.web.ddentist.vo.InquiryVO;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/ddit/inquiry")
public class InquiryController {

	@Autowired
	InquiryService inquiryService;

	// 문의게시판으로 이동하고 리스트 불러오기(페이징,검색기능 포함)
	@GetMapping("")
	public String home(
			@RequestParam(name="page", required=false, defaultValue="1") int currentPage,
			@RequestParam(required=false, defaultValue="10") int size,
			@RequestParam(required=false) String searchWord,
			Model model) {
		log.info("home에 왔다.");
		log.info("searchWord(before) : " + searchWord);
		if(searchWord == null) {
			searchWord = "";
		}

		log.info("searchWord(after) : " + searchWord);

		// page적용 list를 뽑아보자
		int total = inquiryService.getTotal(searchWord);

		InqPaginationVO<InquiryVO> inqPageVO = new InqPaginationVO<InquiryVO>(size, 5);
		inqPageVO.setSearchWord(searchWord);
		inqPageVO.setTotalRecord(total);
		inqPageVO.setCurrentPage(currentPage);

		List<InquiryVO> inqVOList = inquiryService.getAllList(inqPageVO);
		inqPageVO.setDataList(inqVOList);

		// 검색창에 내가 입력한 데이터가 나오도록 한다.
		model.addAttribute("searchWord", searchWord);
		// 목록가져오기
		model.addAttribute("inqPageVO", inqPageVO);
		// 게시물 목록 사이즈 가져오기
		model.addAttribute("size", size);

		// PatientDetails 가 null(== 비회원) 이라면 그냥 바로 페이지를 로딩하도록한다.
		PatientDetails patientData = null;
		if(SecurityContextHolder.getContext().getAuthentication().getPrincipal() == "anonymousUser") {
			return "ddit/inquiry";
		}else {
			// 로그인한 사용자의 데이터
			patientData = (PatientDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		}
		// 로그인한 사용자의 데이터를 보내준다.
		model.addAttribute("ptVO", patientData.getPtVO());

		return "ddit/inquiry";
	}

	// 게시물 상세보기 페이지 이동
	@GetMapping("/detail")
	public String detail(@ModelAttribute InquiryVO inqVO, Model model) {
		// 선택한 게시물 데이터 불러오기
		InquiryVO selectInq = inquiryService.selectInq(inqVO);
		// 선택한 게시물의 데이터를 불러와 inqVO에 넣었다.
		model.addAttribute("inqVO", selectInq);

		// PatientDetails 가 null(== 비회원) 이라면 그냥 바로 페이지를 로딩하도록한다.
		PatientDetails patientData = null;
		if(SecurityContextHolder.getContext().getAuthentication().getPrincipal() == "anonymousUser") {
			return "ddit/inquiryDetail";
		}else {
			// 로그인한 사용자의 데이터
			patientData = (PatientDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		}
		// 로그인한 사용자의 데이터를 보내준다.
		model.addAttribute("ptVO", patientData.getPtVO());

		return "ddit/inquiryDetail";
	}


	@GetMapping("/delete")
	public String delete(@ModelAttribute InquiryVO inqVO) {
		int result = inquiryService.deleteInq(inqVO);

		return "redirect:/ddit/inquiry";
	}

	// 게시물작성 페이지로 이동하기(로그인한 작성자의 데이터 포함)
	@GetMapping("/write")
	public String write(@ModelAttribute InquiryVO inqVO, Model model) {
		InquiryVO modiInqVO = null; // 수정게시물의 데이터가 담길 변수명
		PatientDetails patientData = null;	// 현재 로그인한 사용자의 데이터가 담길 변수명

		// 로그인한 사용자의 데이터, 문의글 가져오기
		modiInqVO = inquiryService.modifyInq(inqVO);

		// 게시글 정보(수정목적으로 데이터 땡겨옴)
		model.addAttribute("inqVO", modiInqVO);

		// PatientDetails 가 null(== 비회원) 이라면 그냥 바로 페이지를 로딩하도록한다.
		if(SecurityContextHolder.getContext().getAuthentication().getPrincipal() == "anonymousUser") {
			return "ddit/inquiryWrite";
		}else {
			// 로그인한 사용자의 데이터
			patientData = (PatientDetails)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		}
		// 현재 로그인한 사용자정보
		model.addAttribute("ptVO", patientData.getPtVO());

		return "ddit/inquiryWrite";
	}


	@PostMapping("/create")
	public String create(@ModelAttribute InquiryVO inqVO, Model model, HttpServletResponse response) throws IOException {
		log.info("게시글 등록 버튼을 누름");

		int result = inquiryService.createInq(inqVO);

		String goPage = "";
		if(result > 0) {	// 게시물 등록(수정) 성공시
			if(inqVO.getInqNum() == 0) {
				goPage = "redirect:/ddit/inquiry/detail?inqNum=" + inqVO.getNewInqNum();
			}else {
				goPage = "redirect:/ddit/inquiry/detail?inqNum=" + inqVO.getInqNum();
			}
		}else {	// 게시물 등록(수정) 실패시
			model.addAttribute("error", "writeError");
			model.addAttribute("inqVO", inqVO);
			goPage = "ddit/inquiryWrite";
		}

		return goPage;
	}

	// 문의게시판에서 비밀글에 비밀번호를 입력하면 작동하는 메서드
	@ResponseBody
	@PostMapping("/secret")
	public Boolean secret(@RequestBody InquiryVO inqVO) {

		log.info("secret에 왔다.");
		log.info("password 데이터 왔냐 : " + inqVO);

		int cnt = inquiryService.getPassword(inqVO);
		log.info("cnt : " + cnt);

		Boolean result = null;

		if(cnt > 0) {
			return result = true;
		}else {
			return result = false;
		}
	}

}
