package com.web.ddentist.ddit.preservation.service;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.web.ddentist.hospital.crm.sms.util.SmsSendUtil;
import com.web.ddentist.mapper.PreservationMapper;
import com.web.ddentist.vo.EmployeeVO;
import com.web.ddentist.vo.HospitalInfoVO;
import com.web.ddentist.vo.PatientVO;
import com.web.ddentist.vo.ReservationVO;

@Service
public class PreservationImpl implements IPreservationService {
	
	@Autowired
	private PreservationMapper presvMapper;
	@Autowired
	private SmsSendUtil smsSendUtil;
	
	@Override
	public String sendMAuthNum(PatientVO ptVO, HttpSession session) {
		
		// 로그인한 회원일 경우 주민등록번호를 검사한다.
		Object ptDetails = getPatientDetails();
		if(!ptDetails.equals("anonymousUser")) {
			String ptNum = presvMapper.selectPtNum(ptVO);
			if(ptNum == null) return "NONE";
		}
		
//		String ptPhone = ptVO.getPtPhone();
//		String authNum = String.valueOf((int) (Math.random() * 899999) + 100000);
//		String content = "본인확인 인증번호 [" + authNum + "]를 입력해주세요.";
//		try {
//			smsSendUtil.sendSms(ptPhone, content);
//		} catch (Exception e) {
//			return "FAILED";
//		}
//		session.setAttribute("authNum", authNum);
		session.setAttribute("authNum", "123456");
		return "SUCCESS";
	}
	
	@Override
	public String sendNmAuthNum(PatientVO ptVO, HttpSession session) {
		
//		String ptPhone = ptVO.getPtPhone();
//		String authNum = String.valueOf((int) (Math.random() * 899999) + 100000);
//		String content = "본인확인 인증번호 [" + authNum + "]를 입력해주세요.";
//		try {
//			smsSendUtil.sendSms(ptPhone, content);
//		} catch (Exception e) {
//			return "FAILED";
//		}
//		session.setAttribute("authNum", authNum);
		session.setAttribute("authNum", "123456");
		return "SUCCESS";
	}
	
	public Object getPatientDetails() {
		return SecurityContextHolder.getContext().getAuthentication().getPrincipal();
	}
	
	@Override
	public String checkAuthNum(Map<String, String> paramMap, HttpSession session) {
		String authNum = paramMap.get("authNum");
//		String sendedAuthNum = (String) session.getAttribute("authNum");
//		if(authNum.equals(sendedAuthNum)) {
//			session.setAttribute("authYN", "Y");
//			return "SUCCESS";
//		}
		if(authNum.equals("123456")) {
			session.setAttribute("authYN", "Y");
			return "SUCCESS";
		}
		return "FAILED";
	}
	
	// 예약 조회를 위해 본인 인증을 했는지 확인
	private boolean isAuthorized() {
		ServletRequestAttributes requestAtt = (ServletRequestAttributes) RequestContextHolder.currentRequestAttributes();
		HttpSession session = requestAtt.getRequest().getSession();
		String authYN = (String) session.getAttribute("authYN");
		if(authYN == null) return false;
		session.removeAttribute("authYN");
		return true;
	}
	
	@Override
	public List<ReservationVO> listPresv(Map<String, String> paramMap) {
//		if(!isAuthorized()) return null;
		
		PatientVO ptVO = new PatientVO();
		ptVO.setPtNm(paramMap.get("ptNm"));
		String ptRrno = paramMap.get("ptRrno1") + paramMap.get("ptRrno2");
		ptVO.setPtRrno(ptRrno);
		String ptNum = presvMapper.selectPtNum(ptVO);
		if(ptNum == null) return null;
		return presvMapper.listPresv(ptNum);
	}
	
	@Override
	public List<ReservationVO> listNonPresv(Map<String, String> paramMap) {
//		if(!isAuthorized()) return null;
		
		PatientVO ptVO = new PatientVO();
		ptVO.setPtNm(paramMap.get("ptNm"));
		String ptPhone = paramMap.get("ptPhone1") + paramMap.get("ptPhone2") + paramMap.get("ptPhone3");
		ptVO.setPtPhone(ptPhone);
		return presvMapper.listNonPresv(ptVO);
	}
	
	@Override
	public ReservationVO selectPresv(String resvNum) {
		return presvMapper.selectPresv(resvNum);
	}
	
	@Override
	public String cancelResv(ReservationVO resvVO) {
		int result = presvMapper.cancelResv(resvVO);
		if(result == 0) return "FAILED";
		return "SUCCESS";
	}
	
	@Override
	public List<String> selectHiServiceTime(String resvSdt) {
		
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Calendar selectedDt = Calendar.getInstance();
		
		try {
			selectedDt.setTime(sdf.parse(resvSdt));
		} catch (Exception e) {
			return null;
		}
		
		int dayOfWeek = selectedDt.get(Calendar.DAY_OF_WEEK);
		if(dayOfWeek == 1) return null;
		if(dayOfWeek == 7) return getHiWeekendServiceTime();
		
		return getHiWeekdayServiceTime();
	}
	
	// 토요일 예약 가능 시간 설정
	private List<String> getHiWeekendServiceTime(){
		
		HospitalInfoVO hiVO = presvMapper.selectHiServiceTime();
		String openTime = hiVO.getHiOpenTime();
		String lunchStime = hiVO.getHiLunchStime();
		
		int openTimeNum = Integer.parseInt(openTime.replace(":", ""));
		int lunchStimeNum = Integer.parseInt(lunchStime.replace(":", ""));
		
		NumberFormat nf = new DecimalFormat("0000");
		List<String> resvTimeList = new ArrayList<>();
		int idx = 0;
		for(int i = openTimeNum; i < lunchStimeNum; i+= 30) {
			if(idx != 0 && idx % 2 == 0) i += 40;
			idx++;
			resvTimeList.add(nf.format(i));
		}
		
		return resvTimeList; 
	}
	
	// 평일 예약 가능 시간 설정
	private List<String> getHiWeekdayServiceTime(){
		
		HospitalInfoVO hiVO = presvMapper.selectHiServiceTime();
		String openTime = hiVO.getHiOpenTime();
		String closeTime = hiVO.getHiCloseTime();
		String lunchStime = hiVO.getHiLunchStime();
		String lunchEtime = hiVO.getHiLunchEtime();
		
		int openTimeNum = Integer.parseInt(openTime.replace(":", ""));
		int closeTimeNum = Integer.parseInt(closeTime.replace(":", ""));
		int lunchStimeNum = Integer.parseInt(lunchStime.replace(":", ""));
		int lunchEtimeNum = Integer.parseInt(lunchEtime.replace(":", ""));
		
		NumberFormat nf = new DecimalFormat("0000");
		List<String> resvTimeList = new ArrayList<>();
		int idx = 0;
		for(int i = openTimeNum; i < closeTimeNum; i+= 30) {
			if(idx != 0 && idx % 2 == 0) i += 40;
			idx++;
			if(i >= lunchStimeNum && i < lunchEtimeNum) continue;
			resvTimeList.add(nf.format(i));
		}
		
		return resvTimeList; 
		
	}
	
	@Override
	public List<EmployeeVO> listDoc(String resvSdt) {
		return presvMapper.listDoc(resvSdt);
	}
	
	// 예약 추가를 위한 ReservationVO 객체를 생성
	private ReservationVO setReservationVO(Map<String, String> paramMap) {
		
		ReservationVO resvVO = new ReservationVO();
		String ptNum = paramMap.get("ptNum");
		resvVO.setPtNum(ptNum);
		String ptNm = paramMap.get("ptNm");
		resvVO.setPtNm(ptNm);
		String ptPhone = paramMap.get("ptPhone1") + paramMap.get("ptPhone2") + paramMap.get("ptPhone3");
		resvVO.setPtPhone(ptPhone);
		String resvSdt = paramMap.get("resvSdt1") + paramMap.get("resvSdt2");
		resvVO.setResvSdt(resvSdt);
		String empNum = paramMap.get("empNum");
		resvVO.setEmpNum(empNum);
		String resvCc = paramMap.get("resvCc");
		resvVO.setResvCc(resvCc);
		
		return resvVO;
	}
	
	@Override
	public int insertPresv(Map<String, String> paramMap) {
		if(!isAuthorized()) return -1;
		
		PatientVO ptVO = new PatientVO();
		String ptNm = paramMap.get("ptNm");
		ptVO.setPtNm(ptNm);
		String ptRrno = paramMap.get("ptRrno1") + paramMap.get("ptRrno2");
		ptVO.setPtRrno(ptRrno);
		String ptNum = presvMapper.selectPtNum(ptVO);
		paramMap.put("ptNum", ptNum);
		
		ReservationVO resvVO = setReservationVO(paramMap);
		return presvMapper.insertResv(resvVO);
	}
	
	@Override
	public int insertNonPresv(Map<String, String> paramMap) {
		if(!isAuthorized()) return -1;
		
		ReservationVO resvVO = setReservationVO(paramMap);
		return presvMapper.insertResv(resvVO);
	}
	
}
