package com.web.ddentist.hospital.manage.hospitalInfo.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.tomcat.util.buf.CharChunk.CharInputChannel;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.web.ddentist.hospital.manage.hospitalInfo.service.IHospitalInfoService;
import com.web.ddentist.vo.ChairVO;
import com.web.ddentist.vo.CommonCodeVO;
import com.web.ddentist.vo.DepartmentVO;
import com.web.ddentist.vo.HospitalInfoVO;

import lombok.extern.slf4j.Slf4j;
import net.coobird.thumbnailator.Thumbnailator;


/**
 * 병원관리 메뉴 - 병원기초정보 관리 페이지
 * 
 * @author 박지은
 *
 */

@Slf4j
@Controller
@RequestMapping("/hospital/manage/hosInfo")
public class HospitalInfoController {
	
	@Autowired
	IHospitalInfoService hospitalInfoService;
	
	// 병원기초 정보관리페이지 이동
	@GetMapping("")
	public String detail(Model model) {
		log.info("병원기초정보 관리 페이지에 왔다. ");
		
		HospitalInfoVO hosInfo = this.hospitalInfoService.getHospitalInfo();
		log.info("hosInfo : {병원정보 } : " + hosInfo);
		
		// 병원구분
		String commGrCd = "HI_TYPE_CD";
		
		List<CommonCodeVO> hiTypeList =  this.hospitalInfoService.getCommon(commGrCd);
		log.info("병원 구분 불러오기 : " + hiTypeList);
		
		// 진료실
		List<DepartmentVO> deptList = this.hospitalInfoService.deptList();
		log.info("deptList : {}" + deptList);
		log.info("진료실 목록 불러오기 : " + deptList);
		
		// 체어
		List<ChairVO> chairList = this.hospitalInfoService.chairList();
		log.info("chairList : {}" + chairList);
		
		model.addAttribute("deptList", deptList);
		model.addAttribute("chairList", chairList);
		model.addAttribute("hosInfo", hosInfo);
		model.addAttribute("hiTypeList", hiTypeList);
	
		
		return "hospital/hospitalInfo";
	}
	
	// 병원기초 정보 수정(파일업로드 포함)
	@ResponseBody
	@PostMapping("/updatePost")
	public HospitalInfoVO update(@ModelAttribute HospitalInfoVO hosVO,
							MultipartFile uploadFile) {  
		
		log.info("updatePost에 왔다~!!");
		log.info("hosVO : " + hosVO);
		
		String uploadFilename = "";
		
		if(!uploadFile.isEmpty()) {
			//파일업로드 서비스 호출
			uploadFilename = fileUpload(uploadFile);
			
			String filename = "/" + getFolder().replace("\\", "/") + "/" + "s_" + uploadFilename;
			hosVO.setHiImg(filename);
		}
		
		int result = this.hospitalInfoService.updatePost(hosVO);
		log.info("병원정보 수정 결과 : " + result + "업데이트 성공!!! ");
		
		if(result < 0) { //등록 실패
			HospitalInfoVO hosInfo = this.hospitalInfoService.getHospitalInfo();
			log.info("hosInfo : {병원정보 } : " + hosInfo);
			
			return hosInfo;
		}else {   //등록 성공
			HospitalInfoVO hosInfo = this.hospitalInfoService.getHospitalInfo();
			log.info("hosInfo : {병원정보 } : " + hosInfo);
			
			return hosInfo;
		}
		
		
	}
	
	public String fileUpload(MultipartFile uploadFile) {
		
		// 업로드 경로
		String uploadFolder ="C:\\eGov3.10.0\\workspace\\DDentistProj\\src\\main\\webapp\\resources\\images\\hospital";
		
		File uploadPath = new File(uploadFolder, getFolder());
		log.info("upload Path : " +  uploadPath);
		
		if(uploadPath.exists()==false) { 
			uploadPath.mkdirs(); 
		} 
		String uploadFileName= uploadFile.getOriginalFilename();
		System.out.println("오리지날 파일이름 : " + uploadFileName);
		
		UUID uuid = UUID.randomUUID();
		uploadFileName = uuid.toString() +  "_" + uploadFileName;
		
		//saveFile = 폴더가 생성된 업로드 경로 + 파일이름
		File saveFile = new File(uploadPath, uploadFileName);
		
		try {
			//계획을 실행 => 파일 복사됨(클라이언트의 파일을 서버의공간으로 복사)
			//파일이름(uuid_OriginalFilename)을 서버 경로에 복사
			uploadFile.transferTo(saveFile);
			
			//썸네일 처리하자
			if(checkImageType(saveFile)) {
				
				//썸네일 생성
				FileOutputStream thumbnail = new FileOutputStream(new File(uploadPath, "s_" + uploadFileName));
				Thumbnailator.createThumbnail(uploadFile.getInputStream(), thumbnail, 140, 200);
				thumbnail.close(); //outputStream을 close
			}
			
		} catch (IllegalStateException e) {
			log.error(e.getMessage());
		} catch (IOException e) {
			log.error(e.getMessage());
		}
		
		return uploadFileName;
	}
	
	//이미지냐?
	public static boolean checkImageType(File uploadFile) {
		//마임타입인지 확인
		//file.toPath() : 파일객체를 path객체로 변환함
		try {
			String contentType = Files.probeContentType(uploadFile.toPath());
			log.info("contentType : " + contentType);
			
			//contentType가 image로 시작하면 true를리턴
			return contentType.startsWith("image");
			
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		// 이 파일이 이미지가 아닐 경우
		return false;
	}

	public String getFolder() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		Date date = new Date();
		String str = sdf.format(date);
		
		return str.replace("-", File.separator);
	}

	@ResponseBody
	@PostMapping("/updateChair")
	public String updateChair(@RequestBody List<ChairVO> param) {
		
		log.info("updateChair에 왔다~!!! " );
		log.info("param : {} " + param);
		
		int result = this.hospitalInfoService.updateChair(param);
		
		if(result < 0) { //등록 실패
			return "FAILED";
		}else {   //등록 성공
			return "SUCCESS";
		}
	}
	
	@ResponseBody
	@PostMapping("createChair")
	public String createChair(@RequestBody List<ChairVO> param) {
		
		log.info("createChair에 왔다~!!! " );
		log.info("param : {} " + param);
		
		int result = this.hospitalInfoService.createChair(param);
		

		if(result < 0) { //등록 실패
			return "FAILED";
		}else {   //등록 성공
			return "SUCCESS";
		}
	}
	
	@ResponseBody
	@PostMapping("deleteChair")
	public String deleteChair(@RequestBody List<ChairVO> param) {
		
		log.info("deleteChair에 왔다~!!! " );
		log.info("param : {} " + param);
		
		int result = this.hospitalInfoService.deleteChair(param);
		
		
		if(result < 0) { //등록 실패
			return "FAILED";
		}else {   //등록 성공
			return "SUCCESS";
		}
	}
	
	/*
	List<ChairVO> chairList = this.hospitalInfoService.chairList();
	Map<String, Object> result = new HashMap<String, Object>();
	result.put("resultList", chairList);
	
	return result;
	*/
	
	
	
}
