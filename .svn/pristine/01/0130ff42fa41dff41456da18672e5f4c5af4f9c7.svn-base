package com.web.ddentist.mapper;

import java.util.List;

import com.web.ddentist.vo.CheckupVO;
import com.web.ddentist.vo.DiseaseVO;
import com.web.ddentist.vo.PiVO;
import com.web.ddentist.vo.RegistVO;
import com.web.ddentist.vo.ReservationVO;
import com.web.ddentist.vo.TxCodeVO;
import com.web.ddentist.vo.TxNextVO;
import com.web.ddentist.vo.TxPlanVO;
import com.web.ddentist.vo.TxVO;

public interface ChartMapper {
	
	/**
	 * 증상(PI) 카드에서 사용할 상병 목록 조회
	 * 
	 * @return 상병 목록
	 */
	public List<DiseaseVO> listDis();
	
	/**
	 * 처치 계획(TX PLAN), 처치(TX), 다음 처치 계획(TX NEXT)에서 사용할 처치 목록 조회
	 * 
	 * @return 처치 목록
	 */
	public List<TxCodeVO> listTxCode();
	
	/**
	 * 오늘의 접수 목록을 조회
	 * 
	 * @return 오늘 등록된 접수 목록
	 */
	public List<RegistVO> listRegist();
	
	/**
	 * 취소된 예약을 제외한 오늘의 예약 목록을 조회
	 * 
	 * @return 오늘의 예약 목록
	 */
	public List<ReservationVO> listResv();
	
	/**
	 * 접수 목록으로부터 진료를 시작하여 진료 데이터 추가
	 * 
	 * @param chkVO 접수 번호와 진료 담당 직원 번호가 담긴 VO 
	 * @return 성공 : 1, 실패 : 0
	 */
	public int insertCheckup(CheckupVO chkVO);
	
	/**
	 * 접수 테이블의 상태(REG_STATUS)를 진료중단(STOP)으로 변경
	 * 
	 * @param chkVO 상태를 변경할 진료의 진료 번호가 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int stopCheckup(CheckupVO chkVO);
	
	/**
	 * 접수 태이블의 상태(REG_STATUS)를 진료완료(CMPTN_TREAT)로 변경
	 * 
	 * @param chkVO 상태를 변경할 진료의 진료 번호가 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int completeCheckup(CheckupVO chkVO);
	
	/**
	 * 진료를 시작한 접수의 상태를 '진료중'으로 변경
	 * 
	 * @param regNum 상태를 변경할 접수의 접수 번호
	 * @return 성공 : 1, 실패 : 0
	 */
	public int updateRegStatusInTreat(String regNum);
	
	/**
	 * 환자의 증상(PI)을 추가
	 * 
	 * @param piVO 증상(PI) 정보가 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int insertPi(PiVO piVO);
	
	/**
	 * 환자의 치료 계획(TX PLAN)을 추가
	 * 
	 * @param txpVO 치료 계획(TX PLAN) 정보가 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int insertTxPlan(TxPlanVO txpVO);
	
	/**
	 * 환자의 처치(TX)을 추가
	 * 
	 * @param txVO 처치(TX) 정보가 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int insertTx(TxVO txVO);
	
	/**
	 * 환자의 다음 치료 계획(TX NEXT)을 추가
	 * 
	 * @param txnVO 다음 치료 계획(TX NEXT) 정보가 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int insertTxNext(TxNextVO txnVO);
	
	/**
	 * 환자의 증상(PI) 차트 기록 목록 조회
	 * 
	 * @param ptNum 환자 번호
	 * @return 증상(PI) 차트 기록 목록
	 */
	public List<PiVO> listPtPi(String ptNum);
	
	/**
	 * 환자의 처치 계획(TX PLAN) 차트 기록 목록 조회
	 * 
	 * @param ptNum 환자 번호
	 * @return 처치 계획(TX PLAN) 차트 기록 목록
	 */
	public List<TxPlanVO> listPtTxPlan(String ptNum);
	
	/**
	 * 환자의 처치(TX) 차트 기록 목록 조회
	 * 
	 * @param ptNum 환자 번호
	 * @return 처치(TX) 차트 기록 목록
	 */
	public List<TxVO> listPtTx(String ptNum);
	
	/**
	 * 환자의 다음 처치 계획(TX NEXT) 차트 기록 목록 조회
	 * 
	 * @param ptNum ptNum
	 * @return 다음 처치 계획(TX NEXT) 차트 기록 목록
	 */
	public List<TxNextVO> listPtTxNext(String ptNum);
	
	/**
	 * 해당 차트 내용이 삭제할 수 있는지 확인<br>
	 * 일주일 이내에 작성된 차트 내용만 삭제할 수 있다.
	 * 
	 * @param chkNum 진료 번호
	 * @return 삭제 가능 : 1, 삭제 불가능 : 0
	 */
	public int checkPiTxDt(String chkNum);
	
	/**
	 * 환자의 증상 삭제
	 * 
	 * @param piVO 삭제할 증상의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int deletePi(PiVO piVO);
	
	/**
	 * 환자의 치료 계획 삭제
	 * 
	 * @param txpVO 삭제할 치료 계획의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int deleteTxPlan(TxPlanVO txpVO);
	
	/**
	 * 환자의 처치 삭제
	 * 
	 * @param txVO 삭제할 처치의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int deleteTx(TxVO txVO);
	
	/**
	 * 환자의 다음 치료 계획 삭제
	 * 
	 * @param txnVO 삭제할 다음 치료 계획의 진료 번호, 증상 순번이 담긴 VO
	 * @return 성공 : 1, 실패 : 0
	 */
	public int deleteTxNext(TxNextVO txnVO);
}
